self["webpackHotUpdatestorybook"]("SearchProduct-stories",{

/***/ "./stories/SearchProduct.stories.js":
/*!******************************************!*\
  !*** ./stories/SearchProduct.stories.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SearchProduct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SearchProduct */ "./stories/SearchProduct.js");
/* harmony import */ var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @storybook/testing-library */ "./node_modules/@storybook/testing-library/dist/index.mjs");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Component/SearchProduct",
  tags: ["autodocs"],
  parameters: {
    layout: "centered"
  },
  argTypes: {
    placeholder: {
      control: "text"
    },
    fontSize: {
      control: "text"
    },
    searchProductBackgroundColor: {
      control: "color"
    }
  }
});
const Default = {
  args: {
    placeholder: "Search here ...",
    fontSize: "12px",
    searchProductBackgroundColor: "#ecc2c2"
  },
  render: args => (0,_SearchProduct__WEBPACK_IMPORTED_MODULE_0__.createSearchProduct)(args),
  play: async ({
    canvasElement
  }) => {
    const canvas = canvasElement;

    // Test search functionality
    const searchInput = canvas.querySelector('input[type="search"]');
    searchInput.value = "Tesla";
    searchInput.dispatchEvent(new Event("input"));

    // Delay for filtering to apply
    await new Promise(resolve => setTimeout(resolve, 500));

    // Verify filtered products
    const teslaModelS = canvas.querySelector("li");
    const fordMustang = canvas.querySelector("li");
    if (teslaModelS.textContent === "Tesla Model S" && !fordMustang) {
      console.log("Search functionality works");
    } else {
      console.error("Search functionality failed");
    }

    // Open filter popup
    const filterIcon = canvas.querySelector("i.fa-filter");
    filterIcon.click();

    // Delay for popup to appear
    await new Promise(resolve => setTimeout(resolve, 500));

    // Verify filter popup content
    const filterPopup = canvas.querySelector(".filter-popup");
    if (filterPopup.textContent.includes("Tesla")) {
      console.log("Filter popup contains brands");
    } else {
      console.error("Filter popup does not contain brands");
    }

    // Select a brand to filter
    const teslaFilter = filterPopup.querySelector("li");
    teslaFilter.click();

    // Delay for filtering to apply
    await new Promise(resolve => setTimeout(resolve, 500));

    // Verify filtered products by brand
    const filteredProduct = canvas.querySelector("li");
    if (filteredProduct.textContent === "Tesla Model S" && !canvas.querySelector('li:not([data-brand="Tesla"])')) {
      console.log("Brand filter works");
    } else {
      console.error("Brand filter failed");
    }

    // Clear filter
    const clearFilter = filterPopup.querySelector("li");
    clearFilter.click();

    // Delay for clearing filter
    await new Promise(resolve => setTimeout(resolve, 500));

    // Verify all products are visible
    const allProducts = canvas.querySelectorAll("li");
    if (allProducts.length > 0) {
      console.log("Clear filter works");
    } else {
      console.error("Clear filter failed");
    }
  }
};
;
const __namedExportsOrder = ["Default"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    placeholder: \"Search here ...\",\n    fontSize: \"12px\",\n    searchProductBackgroundColor: \"#ecc2c2\"\n  },\n  render: args => createSearchProduct(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = canvasElement;\n\n    // Test search functionality\n    const searchInput = canvas.querySelector('input[type=\"search\"]');\n    searchInput.value = \"Tesla\";\n    searchInput.dispatchEvent(new Event(\"input\"));\n\n    // Delay for filtering to apply\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Verify filtered products\n    const teslaModelS = canvas.querySelector(\"li\");\n    const fordMustang = canvas.querySelector(\"li\");\n    if (teslaModelS.textContent === \"Tesla Model S\" && !fordMustang) {\n      console.log(\"Search functionality works\");\n    } else {\n      console.error(\"Search functionality failed\");\n    }\n\n    // Open filter popup\n    const filterIcon = canvas.querySelector(\"i.fa-filter\");\n    filterIcon.click();\n\n    // Delay for popup to appear\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Verify filter popup content\n    const filterPopup = canvas.querySelector(\".filter-popup\");\n    if (filterPopup.textContent.includes(\"Tesla\")) {\n      console.log(\"Filter popup contains brands\");\n    } else {\n      console.error(\"Filter popup does not contain brands\");\n    }\n\n    // Select a brand to filter\n    const teslaFilter = filterPopup.querySelector(\"li\");\n    teslaFilter.click();\n\n    // Delay for filtering to apply\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Verify filtered products by brand\n    const filteredProduct = canvas.querySelector(\"li\");\n    if (filteredProduct.textContent === \"Tesla Model S\" && !canvas.querySelector('li:not([data-brand=\"Tesla\"])')) {\n      console.log(\"Brand filter works\");\n    } else {\n      console.error(\"Brand filter failed\");\n    }\n\n    // Clear filter\n    const clearFilter = filterPopup.querySelector(\"li\");\n    clearFilter.click();\n\n    // Delay for clearing filter\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Verify all products are visible\n    const allProducts = canvas.querySelectorAll(\"li\");\n    if (allProducts.length > 0) {\n      console.log(\"Clear filter works\");\n    } else {\n      console.error(\"Clear filter failed\");\n    }\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};

/***/ }),

/***/ "?4f7e":
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

});
//# sourceMappingURL=SearchProduct-stories.7afabefcc4a3c290235b.hot-update.js.map
{"version":3,"file":"node_modules_mdx-js_react_index_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://storybook/./node_modules/@mdx-js/react/index.js","webpack://storybook/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["export {MDXProvider, useMDXComponents} from './lib/index.js'\r\n","/**\r\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\r\n * @typedef {import('react').Component<{}, {}, unknown>} Component\r\n * @typedef {import('react').ReactNode} ReactNode\r\n */\r\n\r\n/**\r\n * @callback MergeComponents\r\n *   Custom merge function.\r\n * @param {Readonly<MDXComponents>} currentComponents\r\n *   Current components from the context.\r\n * @returns {MDXComponents}\r\n *   Additional components.\r\n *\r\n * @typedef Props\r\n *   Configuration for `MDXProvider`.\r\n * @property {ReactNode | null | undefined} [children]\r\n *   Children (optional).\r\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\r\n *   Additional components to use or a function that creates them (optional).\r\n * @property {boolean | null | undefined} [disableParentContext=false]\r\n *   Turn off outer component context (default: `false`).\r\n */\r\n\r\nimport React from 'react'\r\n\r\n/** @type {Readonly<MDXComponents>} */\r\nconst emptyComponents = {}\r\n\r\nconst MDXContext = React.createContext(emptyComponents)\r\n\r\n/**\r\n * Get current components from the MDX Context.\r\n *\r\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\r\n *   Additional components to use or a function that creates them (optional).\r\n * @returns {MDXComponents}\r\n *   Current components.\r\n */\r\nexport function useMDXComponents(components) {\r\n  const contextComponents = React.useContext(MDXContext)\r\n\r\n  // Memoize to avoid unnecessary top-level context changes\r\n  return React.useMemo(\r\n    function () {\r\n      // Custom merge via a function prop\r\n      if (typeof components === 'function') {\r\n        return components(contextComponents)\r\n      }\r\n\r\n      return {...contextComponents, ...components}\r\n    },\r\n    [contextComponents, components]\r\n  )\r\n}\r\n\r\n/**\r\n * Provider for MDX context.\r\n *\r\n * @param {Readonly<Props>} properties\r\n *   Properties.\r\n * @returns {JSX.Element}\r\n *   Element.\r\n * @satisfies {Component}\r\n */\r\nexport function MDXProvider(properties) {\r\n  /** @type {Readonly<MDXComponents>} */\r\n  let allComponents\r\n\r\n  if (properties.disableParentContext) {\r\n    allComponents =\r\n      typeof properties.components === 'function'\r\n        ? properties.components(emptyComponents)\r\n        : properties.components || emptyComponents\r\n  } else {\r\n    allComponents = useMDXComponents(properties.components)\r\n  }\r\n\r\n  return React.createElement(\r\n    MDXContext.Provider,\r\n    {value: allComponents},\r\n    properties.children\r\n  )\r\n}\r\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"SearchProduct-stories.d9d8dcb0094ea3687040.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://storybook/./stories/SearchProduct.stories.js"],"sourcesContent":["import { createSearchProduct } from \"./SearchProduct\";\nimport { within, userEvent } from \"@storybook/testing-library\";\n\nexport default {\n  title: \"Component/SearchProduct\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  argTypes: {\n    placeholder: { control: \"text\" },\n    fontSize: { control: \"text\" },\n    searchProductBackgroundColor: { control: \"color\" },\n  },\n};\n\nexport const Default = {\n  args: {\n    placeholder: \"Search here ...\",\n    fontSize: \"12px\",\n    searchProductBackgroundColor: \"#e1c8c8\",\n  },\n  render: (args) => createSearchProduct(args),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Test the search functionality\n    const searchInput = canvas.getByPlaceholderText(\"Search here ...\");\n    userEvent.type(searchInput, \"Tesla\");\n\n    // Check if filtered products are displayed\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Test the filter popup\n    // Use querySelector to find the Font Awesome icon\n    const filterIcon = canvasElement.querySelector(\".fa-filter\");\n    userEvent.click(filterIcon);\n\n    // Wait for the popup to be visible and contain brand options\n    const teslaBrand = await canvas.findByText(\"Tesla\");\n    expect(teslaBrand).toBeInTheDocument();\n\n    // Click on the \"Tesla\" brand to filter\n    userEvent.click(teslaBrand);\n\n    // if (filterIcon) {\n    //   userEvent.click(filterIcon);\n\n    //   // Wait for the popup to be visible and contain brand options\n    //   const teslaBrand = await canvas.findByText(\"Tesla\");\n    //   expect(teslaBrand).toBeInTheDocument();\n\n    //   // Click on the \"Tesla\" brand to filter\n    //   userEvent.click(teslaBrand);\n\n    //   // // Wait for the products list to update\n    //   // const teslaModelS = await canvas.findByText(\"Tesla Model S\");\n    //   // expect(teslaModelS).toBeInTheDocument();\n    //   // expect(canvas.queryByText(\"Ford Mustang\")).not.toBeInTheDocument();\n\n    //   // // Clear filter\n    //   // userEvent.click(await canvas.findByText(\"Clear Filter\"));\n\n    //   // // Wait for all products to be displayed again\n    //   // const fordMustang = await canvas.findByText(\"Ford Mustang\");\n    //   // expect(fordMustang).toBeInTheDocument();\n    // } else {\n    //   throw new Error(\"Filter icon not found\");\n    // }\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Test the search functionality\n    const searchInput = canvas.getByPlaceholderText(\"Search here ...\");\n    userEvent.type(searchInput, \"Tesla\");\n\n    // Wait for the filtered products to appear\n    await canvas.findByText(\"Tesla Model S\");\n    expect(canvas.getByText(\"Tesla Model S\")).toBeInTheDocument();\n    expect(canvas.queryByText(\"Ford Mustang\")).not.toBeInTheDocument();\n\n    // Test the filter popup\n    const filterIcon = canvas.getByRole(\"img\", { name: /filter/i });\n\n    // Ensure filterIcon exists and is visible\n    expect(filterIcon).toBeInTheDocument();\n\n    // Click the filter icon to open the popup\n    userEvent.click(filterIcon);\n\n    // Wait for the popup to be visible and contain brand options\n    const filterPopup = await canvas.findByRole(\"list\");\n    expect(filterPopup).toBeVisible();\n\n    // Ensure the \"Tesla\" brand option is visible and clickable\n    const teslaBrand = await canvas.findByText(\"Tesla\");\n    expect(teslaBrand).toBeInTheDocument();\n    expect(teslaBrand).toBeVisible();\n\n    // Click on the \"Tesla\" brand to filter\n    userEvent.click(teslaBrand);\n\n    // Wait for the products list to update\n    await canvas.findByText(\"Tesla Model S\");\n    expect(canvas.getByText(\"Tesla Model S\")).toBeInTheDocument();\n    expect(canvas.queryByText(\"Ford Mustang\")).not.toBeInTheDocument();\n\n    // Clear filter\n    const clearFilterItem = await canvas.findByText(\"Clear Filter\");\n    userEvent.click(clearFilterItem);\n\n    // Wait for all products to be displayed again\n    await canvas.findByText(\"Ford Mustang\");\n    expect(canvas.getByText(\"Ford Mustang\")).toBeInTheDocument();\n  },\n};\n;export const __namedExportsOrder = [\"Default\"];"],"names":[],"sourceRoot":""}
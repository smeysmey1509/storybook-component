"use strict";
self["webpackHotUpdatestorybook"]("SearchProduct-stories",{

/***/ "./stories/SearchProduct.stories.js":
/*!******************************************!*\
  !*** ./stories/SearchProduct.stories.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SearchProduct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SearchProduct */ "./stories/SearchProduct.js");
/* harmony import */ var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @storybook/testing-library */ "./node_modules/@storybook/testing-library/dist/index.mjs");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Component/SearchProduct",
  tags: ["autodocs"],
  parameters: {
    layout: "centered"
  },
  argTypes: {
    placeholder: {
      control: "text"
    },
    fontSize: {
      control: "text"
    },
    searchProductBackgroundColor: {
      control: "color"
    }
  }
});
const Default = {
  args: {
    placeholder: "Search here ...",
    fontSize: "12px",
    searchProductBackgroundColor: "#e1c8c8"
  },
  render: args => (0,_SearchProduct__WEBPACK_IMPORTED_MODULE_0__.createSearchProduct)(args),
  play: async ({
    canvasElement
  }) => {
    const canvas = (0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.within)(canvasElement);

    // Test the search functionality
    const searchInput = canvas.getByPlaceholderText("Search here ...");
    _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.userEvent.type(searchInput, "Tesla");

    // Check if filtered products are displayed
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Test the filter popup
    // Use querySelector to find the Font Awesome icon
    const filterIcon = canvasElement.querySelector(".fa-filter");
    if (filterIcon) {
      _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.userEvent.click(filterIcon);

      // Wait for the popup to be visible and contain brand options
      const teslaBrand = await canvas.findByText("Tesla");
      expect(teslaBrand).toBeInTheDocument();

      // Click on the "Tesla" brand to filter
      _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.userEvent.click(teslaBrand);

      // // Wait for the products list to update
      // const teslaModelS = await canvas.findByText("Tesla Model S");
      // expect(teslaModelS).toBeInTheDocument();
      // expect(canvas.queryByText("Ford Mustang")).not.toBeInTheDocument();

      // // Clear filter
      // userEvent.click(await canvas.findByText("Clear Filter"));

      // // Wait for all products to be displayed again
      // const fordMustang = await canvas.findByText("Ford Mustang");
      // expect(fordMustang).toBeInTheDocument();
    } else {
      throw new Error("Filter icon not found");
    }
  }
};
;
const __namedExportsOrder = ["Default"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    placeholder: \"Search here ...\",\n    fontSize: \"12px\",\n    searchProductBackgroundColor: \"#e1c8c8\"\n  },\n  render: args => createSearchProduct(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Test the search functionality\n    const searchInput = canvas.getByPlaceholderText(\"Search here ...\");\n    userEvent.type(searchInput, \"Tesla\");\n\n    // Check if filtered products are displayed\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Test the filter popup\n    // Use querySelector to find the Font Awesome icon\n    const filterIcon = canvasElement.querySelector(\".fa-filter\");\n    if (filterIcon) {\n      userEvent.click(filterIcon);\n\n      // Wait for the popup to be visible and contain brand options\n      const teslaBrand = await canvas.findByText(\"Tesla\");\n      expect(teslaBrand).toBeInTheDocument();\n\n      // Click on the \"Tesla\" brand to filter\n      userEvent.click(teslaBrand);\n\n      // // Wait for the products list to update\n      // const teslaModelS = await canvas.findByText(\"Tesla Model S\");\n      // expect(teslaModelS).toBeInTheDocument();\n      // expect(canvas.queryByText(\"Ford Mustang\")).not.toBeInTheDocument();\n\n      // // Clear filter\n      // userEvent.click(await canvas.findByText(\"Clear Filter\"));\n\n      // // Wait for all products to be displayed again\n      // const fordMustang = await canvas.findByText(\"Ford Mustang\");\n      // expect(fordMustang).toBeInTheDocument();\n    } else {\n      throw new Error(\"Filter icon not found\");\n    }\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=SearchProduct-stories.2ec75101e95476081760.hot-update.js.map
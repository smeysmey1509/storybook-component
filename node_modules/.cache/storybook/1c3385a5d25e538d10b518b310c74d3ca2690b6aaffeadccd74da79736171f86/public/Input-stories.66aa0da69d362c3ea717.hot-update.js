"use strict";
self["webpackHotUpdatestorybook"]("Input-stories",{

/***/ "./stories/Input.js":
/*!**************************!*\
  !*** ./stories/Input.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInput: () => (/* binding */ createInput)
/* harmony export */ });
/* harmony import */ var _input_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.css */ "./stories/input.css");


const createInput = ({
  type = "text",
  placeholder = "Search here ...",
  onChange,
  label, // Add a label property
}) => {
  const input = document.createElement("input");
  input.type = type;
  input.placeholder = placeholder;
  input.classList = "input-field";

  // Create and configure the label element
  const inputLabel = document.createElement("label");
  inputLabel.textContent = label; // Set the label text
  inputLabel.htmlFor = input.id; // Associate the label with the input using its id

  // Optionally generate a unique ID for the input
  input.id = `input-${Math.random().toString(36).substring(2, 15)}`;

  if (onChange) {
    input.addEventListener("input", (event) => {
      onChange(event.target.value);
    });
  }

  // Optionally, add the label to the DOM before or after the input
  // document.body.appendChild(inputLabel); // Append to body after creation
  // document.body.insertBefore(inputLabel, input); // Insert before input

  return { input, label: inputLabel }; // Return both input and label elements
};

/***/ })

});
//# sourceMappingURL=Input-stories.66aa0da69d362c3ea717.hot-update.js.map
{"version":3,"file":"SearchProduct-stories.5c970134ef7d2404548d.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://storybook/./stories/SearchProduct.stories.js"],"sourcesContent":["import { createSearchProduct } from \"./SearchProduct\";\n\nexport default {\n  title: \"Component/SearchProduct\",\n  tags: [\"autodocs\"],\n  parameters: {\n    layout: \"centered\",\n  },\n  argTypes: {\n    placeholder: { control: \"text\" },\n    fontSize: { control: \"text\" },\n    searchProductBackgroundColor: { control: \"color\" },\n  },\n};\n\nexport const Default = {\n  args: {\n    placeholder: \"Search here ...\",\n    fontSize: \"12px\",\n    searchProductBackgroundColor: \"#ecc2c2\",\n  },\n  render: (args) => createSearchProduct(args),\n  play: async ({ canvasElement }) => {\n    const canvas = canvasElement;\n\n    // Test search functionality\n    const searchInput = canvas.querySelector('input[type=\"search\"]');\n    searchInput.value = \"Tesla\";\n    searchInput.dispatchEvent(new Event(\"input\"));\n\n    // Delay for filtering to apply\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // Verify filtered products\n    const teslaModelS = canvas.querySelector(\"li\");\n    const fordMustang = canvas.querySelector(\"li\");\n    if (teslaModelS.textContent === \"Tesla Model S\" && !fordMustang) {\n      console.log(\"Search functionality works\");\n    } else {\n      console.error(\"Search functionality failed\");\n    }\n\n    // Open filter popup\n    const filterIcon = canvas.querySelector(\"i.fa-filter\");\n    filterIcon.click();\n\n    // Delay for popup to appear\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // Verify filter popup content\n    const filterPopup = canvas.querySelector(\".filter-popup\");\n    if (filterPopup.textContent.includes(\"Tesla\")) {\n      console.log(\"Filter popup contains brands\");\n    } else {\n      console.error(\"Filter popup does not contain brands\");\n    }\n\n    // Select a brand to filter\n    const teslaFilter = filterPopup.querySelector(\"li\");\n    teslaFilter.click();\n\n    // Delay for filtering to apply\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // Verify filtered products by brand\n    const filteredProduct = canvas.querySelector(\"li\");\n    if (\n      filteredProduct.textContent === \"Tesla Model S\" &&\n      !canvas.querySelector('li:not([data-brand=\"Tesla\"])')\n    ) {\n      console.log(\"Brand filter works\");\n    } else {\n      console.error(\"Brand filter failed\");\n    }\n\n    // Clear filter\n    const clearFilter = filterPopup.querySelector(\"li\");\n    clearFilter.click();\n\n    // Delay for clearing filter\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // Verify all products are visible\n    const allProducts = canvas.querySelectorAll(\"li\");\n    if (allProducts.length > 0) {\n      console.log(\"Clear filter works\");\n    } else {\n      console.error(\"Clear filter failed\");\n    }\n  },\n};\n;export const __namedExportsOrder = [\"Default\"];"],"names":[],"sourceRoot":""}